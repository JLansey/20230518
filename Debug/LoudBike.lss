
LoudBike.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  0000055b  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00803800  00803800  00000552  2**0
                  ALLOC
  3 .fuse         00000009  00820000  00820000  00000552  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000055b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000130  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003507  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000202b  00000000  00000000  00003c03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000d9e  00000000  00000000  00005c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000019c  00000000  00000000  000069cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000016e9  00000000  00000000  00006b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001d2  00000000  00000000  00008251  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000c0  00000000  00000000  00008423  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_clear_bss>:
  88:	28 e3       	ldi	r18, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a1 31       	cpi	r26, 0x11	; 17
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 a6 01 	call	0x34c	; 0x34c <main>
  9c:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <Charger_init>:
//* Output Parameters   : none
//*--------------------------------------------------------------------------------------

void Charger_init(void)
{
	CHARGER_PWR_GOOD_PORT.DIRCLR = CHARGER_PWR_GOOD_BIT;
  a4:	e0 e0       	ldi	r30, 0x00	; 0
  a6:	f4 e0       	ldi	r31, 0x04	; 4
  a8:	80 e1       	ldi	r24, 0x10	; 16
  aa:	82 83       	std	Z+2, r24	; 0x02
	CHARGER_PWR_GOOD_PORT.OUTSET = CHARGER_PWR_GOOD_BIT;
  ac:	85 83       	std	Z+5, r24	; 0x05
	CHARGER_PWR_GOOD_CTRL = PORT_PULLUPEN_bm;
  ae:	88 e0       	ldi	r24, 0x08	; 8
  b0:	84 8b       	std	Z+20, r24	; 0x14
	
	CHARGER_STATUS_PORT.DIRCLR = CHARGER_STATUS_BIT;
  b2:	e0 e4       	ldi	r30, 0x40	; 64
  b4:	f4 e0       	ldi	r31, 0x04	; 4
  b6:	92 e0       	ldi	r25, 0x02	; 2
  b8:	92 83       	std	Z+2, r25	; 0x02
	CHARGER_STATUS_PORT.OUTSET = CHARGER_STATUS_BIT;
  ba:	95 83       	std	Z+5, r25	; 0x05
	CHARGER_STATUS_CTRL = PORT_PULLUPEN_bm;
  bc:	81 8b       	std	Z+17, r24	; 0x11
  be:	08 95       	ret

000000c0 <Horn_init>:
//* Output Parameters   : none
//*--------------------------------------------------------------------------------------

void Horn_init(void)
{
	HORN_PORT.OUTCLR = HORN_BIT;
  c0:	e0 e2       	ldi	r30, 0x20	; 32
  c2:	f4 e0       	ldi	r31, 0x04	; 4
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	86 83       	std	Z+6, r24	; 0x06
	HORN_PORT.DIRSET = HORN_BIT;
  c8:	81 83       	std	Z+1, r24	; 0x01
  ca:	08 95       	ret

000000cc <Horn_Enable>:
//* Output Parameters   : none
//*--------------------------------------------------------------------------------------

void Horn_Enable(uint8_t Enable)
{
	if(Enable)
  cc:	88 23       	and	r24, r24
  ce:	09 f1       	breq	.+66     	; 0x112 <__EEPROM_REGION_LENGTH__+0x12>
	{
		HORN_PORT.OUTSET = HORN_BIT;
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__RODATA_PM_OFFSET__+0x7f8425>
		
		for(int i = 0; i < 1; i++) {
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	07 c0       	rjmp	.+14     	; 0xea <Horn_Enable+0x1e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	e7 e8       	ldi	r30, 0x87	; 135
  de:	f3 e1       	ldi	r31, 0x13	; 19
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <Horn_Enable+0x14>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <Horn_Enable+0x1a>
  e6:	00 00       	nop
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	18 16       	cp	r1, r24
  ec:	19 06       	cpc	r1, r25
  ee:	b4 f7       	brge	.-20     	; 0xdc <Horn_Enable+0x10>
			_delay_ms(1);
		}
		
		HORN_PORT.OUTCLR = HORN_BIT;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__RODATA_PM_OFFSET__+0x7f8426>
		
		for(int i = 0; i < 5; i++) {
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	07 c0       	rjmp	.+14     	; 0x10a <__EEPROM_REGION_LENGTH__+0xa>
  fc:	e7 e8       	ldi	r30, 0x87	; 135
  fe:	f3 e1       	ldi	r31, 0x13	; 19
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <__EEPROM_REGION_LENGTH__>
 104:	00 c0       	rjmp	.+0      	; 0x106 <__EEPROM_REGION_LENGTH__+0x6>
 106:	00 00       	nop
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	85 30       	cpi	r24, 0x05	; 5
 10c:	91 05       	cpc	r25, r1
 10e:	b4 f3       	brlt	.-20     	; 0xfc <Horn_Enable+0x30>
 110:	08 95       	ret
			_delay_ms(1);
		}
	}
	else
	{
		HORN_PORT.OUTCLR = HORN_BIT;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__RODATA_PM_OFFSET__+0x7f8426>
 118:	08 95       	ret

0000011a <LED_init>:
//*--------------------------------------------------------------------------------------

void LED_init(void)
{
   //Status_Led_Timer = TIME_LED_STATUS_HEARTBEAT;
   LED_RED_PORT.OUTCLR = LED_RED_BIT;
 11a:	e0 e2       	ldi	r30, 0x20	; 32
 11c:	f4 e0       	ldi	r31, 0x04	; 4
 11e:	90 e2       	ldi	r25, 0x20	; 32
 120:	96 83       	std	Z+6, r25	; 0x06
   LED_GREEN_PORT.OUTCLR = LED_GREEN_BIT;
 122:	80 e1       	ldi	r24, 0x10	; 16
 124:	86 83       	std	Z+6, r24	; 0x06

   LED_RED_PORT.DIRSET = LED_RED_BIT;
 126:	91 83       	std	Z+1, r25	; 0x01
   LED_GREEN_PORT.DIRSET = LED_GREEN_BIT;
 128:	81 83       	std	Z+1, r24	; 0x01

   Status_Led_Timer = TIME_LED_STATUS_HEARTBEAT;
 12a:	8a ef       	ldi	r24, 0xFA	; 250
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
 132:	90 93 01 38 	sts	0x3801, r25	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
 136:	08 95       	ret

00000138 <LED_Red>:
//* Output Parameters   : none
//*--------------------------------------------------------------------------------------

void LED_Red(uint8_t Enable)
{
	if(Enable)
 138:	88 23       	and	r24, r24
 13a:	21 f0       	breq	.+8      	; 0x144 <LED_Red+0xc>
	{
		LED_RED_PORT.OUTSET = LED_RED_BIT;
 13c:	80 e2       	ldi	r24, 0x20	; 32
 13e:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__RODATA_PM_OFFSET__+0x7f8425>
 142:	08 95       	ret
	}
	else
	{
		LED_RED_PORT.OUTCLR = LED_RED_BIT;
 144:	80 e2       	ldi	r24, 0x20	; 32
 146:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__RODATA_PM_OFFSET__+0x7f8426>
 14a:	08 95       	ret

0000014c <LED_Green>:
//* Output Parameters   : none
//*--------------------------------------------------------------------------------------

void LED_Green(uint8_t Enable)
{
	if(Enable)
 14c:	88 23       	and	r24, r24
 14e:	21 f0       	breq	.+8      	; 0x158 <LED_Green+0xc>
	{
		LED_GREEN_PORT.OUTSET = LED_GREEN_BIT;
 150:	80 e1       	ldi	r24, 0x10	; 16
 152:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__RODATA_PM_OFFSET__+0x7f8425>
 156:	08 95       	ret
	}
	else
	{
		LED_GREEN_PORT.OUTCLR = LED_GREEN_BIT;
 158:	80 e1       	ldi	r24, 0x10	; 16
 15a:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__RODATA_PM_OFFSET__+0x7f8426>
 15e:	08 95       	ret

00000160 <LowVoltKill_init>:
//*--------------------------------------------------------------------------------------

void LowVoltKill_init(void)
{
	//configure pins
	VOLT_KILL_AC_PORT.OUTCLR = VOLT_KILL_AC_BIT;
 160:	e0 e0       	ldi	r30, 0x00	; 0
 162:	f4 e0       	ldi	r31, 0x04	; 4
 164:	80 e2       	ldi	r24, 0x20	; 32
 166:	86 83       	std	Z+6, r24	; 0x06
	VOLT_KILL_ADC_PORT.OUTCLR = VOLT_KILL_ADC_BIT;
 168:	80 e8       	ldi	r24, 0x80	; 128
 16a:	86 83       	std	Z+6, r24	; 0x06

	//disable inputs
	VOLT_KILL_AC_CTRL = (4 << PORT_ISC0_bp);
 16c:	84 e0       	ldi	r24, 0x04	; 4
 16e:	85 8b       	std	Z+21, r24	; 0x15
	VOLT_KILL_ADC_CTRL = (4 << PORT_ISC0_bp);
 170:	87 8b       	std	Z+23, r24	; 0x17
   
	//Setup DAC
	DAC0.CTRLA = DAC_OUTEN_bm | DAC_ENABLE_bm;
 172:	e0 ea       	ldi	r30, 0xA0	; 160
 174:	f6 e0       	ldi	r31, 0x06	; 6
 176:	81 e4       	ldi	r24, 0x41	; 65
 178:	80 83       	st	Z, r24
	VREF.CTRLA = VREF_DAC0REFSEL_1V1_gc | VREF_ADC0REFSEL_1V1_gc;
 17a:	81 e1       	ldi	r24, 0x11	; 17
 17c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__RODATA_PM_OFFSET__+0x7f80a0>
	DAC0.DATA = LOW_VOLT_KILL_DAC_CNT; // dac on one side, battery on the other
 180:	8d e2       	ldi	r24, 0x2D	; 45
 182:	81 83       	std	Z+1, r24	; 0x01
   
	//Setup AC
	AC0.MUXCTRLA = AC_MUXPOS_PIN0_gc | AC_MUXNEG_DAC_gc | (0 << AC_INVERT_bp);
 184:	e0 e8       	ldi	r30, 0x80	; 128
 186:	f6 e0       	ldi	r31, 0x06	; 6
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	82 83       	std	Z+2, r24	; 0x02
	AC0.CTRLA = AC_RUNSTDBY_bm| AC_ENABLE_bm | AC_INTMODE_POSEDGE_gc;
 18c:	81 eb       	ldi	r24, 0xB1	; 177
 18e:	80 83       	st	Z, r24
	
	LowVoltState = LOW_VOLT_STATE_INIT;
 190:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <LowVoltState>
 194:	08 95       	ret

00000196 <LowVoltKill_update>:
//* Output Parameters   : none
//*--------------------------------------------------------------------------------------

void LowVoltKill_update(void)
{
	if(RTC_getTick() != LowVoltkillOldTick)
 196:	0e 94 58 02 	call	0x4b0	; 0x4b0 <RTC_getTick>
 19a:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <LowVoltkillOldTick>
 19e:	30 91 0b 38 	lds	r19, 0x380B	; 0x80380b <LowVoltkillOldTick+0x1>
 1a2:	82 17       	cp	r24, r18
 1a4:	93 07       	cpc	r25, r19
 1a6:	09 f4       	brne	.+2      	; 0x1aa <LowVoltKill_update+0x14>
 1a8:	d0 c0       	rjmp	.+416    	; 0x34a <LowVoltKill_update+0x1b4>
	{
		LowVoltkillOldTick = RTC_getTick();
 1aa:	0e 94 58 02 	call	0x4b0	; 0x4b0 <RTC_getTick>
 1ae:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <LowVoltkillOldTick>
 1b2:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <LowVoltkillOldTick+0x1>

		if(LowVoltkillTimer_mS)
 1b6:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <LowVoltkillTimer_mS>
 1ba:	90 91 05 38 	lds	r25, 0x3805	; 0x803805 <LowVoltkillTimer_mS+0x1>
 1be:	00 97       	sbiw	r24, 0x00	; 0
 1c0:	29 f0       	breq	.+10     	; 0x1cc <LowVoltKill_update+0x36>
		{
			LowVoltkillTimer_mS--;
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <LowVoltkillTimer_mS>
 1c8:	90 93 05 38 	sts	0x3805, r25	; 0x803805 <LowVoltkillTimer_mS+0x1>
		}

		switch (LowVoltState)
 1cc:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <LowVoltState>
 1d0:	82 30       	cpi	r24, 0x02	; 2
 1d2:	e9 f1       	breq	.+122    	; 0x24e <LowVoltKill_update+0xb8>
 1d4:	28 f4       	brcc	.+10     	; 0x1e0 <LowVoltKill_update+0x4a>
 1d6:	88 23       	and	r24, r24
 1d8:	61 f0       	breq	.+24     	; 0x1f2 <LowVoltKill_update+0x5c>
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	e9 f0       	breq	.+58     	; 0x218 <LowVoltKill_update+0x82>
 1de:	08 95       	ret
 1e0:	84 30       	cpi	r24, 0x04	; 4
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <LowVoltKill_update+0x50>
 1e4:	99 c0       	rjmp	.+306    	; 0x318 <LowVoltKill_update+0x182>
 1e6:	08 f4       	brcc	.+2      	; 0x1ea <LowVoltKill_update+0x54>
 1e8:	5c c0       	rjmp	.+184    	; 0x2a2 <LowVoltKill_update+0x10c>
 1ea:	85 30       	cpi	r24, 0x05	; 5
 1ec:	09 f4       	brne	.+2      	; 0x1f0 <LowVoltKill_update+0x5a>
 1ee:	aa c0       	rjmp	.+340    	; 0x344 <LowVoltKill_update+0x1ae>
 1f0:	08 95       	ret
		{
			case LOW_VOLT_STATE_INIT:
			{
				DAC0.DATA = LOW_VOLT_KILL_DAC_CNT;
 1f2:	8d e2       	ldi	r24, 0x2D	; 45
 1f4:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__RODATA_PM_OFFSET__+0x7f86a1>
				LowVoltkillTimer_mS = LOW_VOLT_KILL_TIMEOUT;
 1f8:	8a e0       	ldi	r24, 0x0A	; 10
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <LowVoltkillTimer_mS>
 200:	90 93 05 38 	sts	0x3805, r25	; 0x803805 <LowVoltkillTimer_mS+0x1>
				LowVoltDetectCount = 0;
 204:	10 92 07 38 	sts	0x3807, r1	; 0x803807 <LowVoltDetectCount>
 208:	10 92 08 38 	sts	0x3808, r1	; 0x803808 <LowVoltDetectCount+0x1>
				LowVoltDetected = 0;
 20c:	10 92 06 38 	sts	0x3806, r1	; 0x803806 <LowVoltDetected>

				LowVoltState = LOW_VOLT_STATE_KILL;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <LowVoltState>
				break;
 216:	08 95       	ret
			}

			//if battery already low without honking horn.  Just shut down with Red LED on
			case LOW_VOLT_STATE_KILL:
			{
				if(!(AC0.STATUS & AC_STATE_bm)) // AC0.STATUS - the analog comparitor to compare voltages
 218:	80 91 87 06 	lds	r24, 0x0687	; 0x800687 <__RODATA_PM_OFFSET__+0x7f8687>
 21c:	84 fd       	sbrc	r24, 4
 21e:	03 c0       	rjmp	.+6      	; 0x226 <LowVoltKill_update+0x90>
				{
					LowVoltState = LOW_VOLT_STATE_DEAD;
 220:	85 e0       	ldi	r24, 0x05	; 5
 222:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <LowVoltState>
				}

				if(LowVoltkillTimer_mS == 0)
 226:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <LowVoltkillTimer_mS>
 22a:	90 91 05 38 	lds	r25, 0x3805	; 0x803805 <LowVoltkillTimer_mS+0x1>
 22e:	89 2b       	or	r24, r25
 230:	09 f0       	breq	.+2      	; 0x234 <LowVoltKill_update+0x9e>
 232:	8b c0       	rjmp	.+278    	; 0x34a <LowVoltKill_update+0x1b4>
				{
					DAC0.DATA = LOW_VOLT_LOW_BATT_DAC_CNT;
 234:	8f e2       	ldi	r24, 0x2F	; 47
 236:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__RODATA_PM_OFFSET__+0x7f86a1>
					LowVoltkillTimer_mS = LOW_VOLT_TIME_MAX_HORN_ON_TIME;
 23a:	80 e1       	ldi	r24, 0x10	; 16
 23c:	97 e2       	ldi	r25, 0x27	; 39
 23e:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <LowVoltkillTimer_mS>
 242:	90 93 05 38 	sts	0x3805, r25	; 0x803805 <LowVoltkillTimer_mS+0x1>
					LowVoltState = LOW_VOLT_STATE_CHECK_HORN1;
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <LowVoltState>
 24c:	08 95       	ret
			}

			//Horn switch detected not pressed.  wait here until horn pressed again, or power dies
			case LOW_VOLT_STATE_CHECK_HORN0:
			{
				Horn_Enable(0);
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	0e 94 66 00 	call	0xcc	; 0xcc <Horn_Enable>

				if(SwitchHornGetStatus())
 254:	0e 94 47 02 	call	0x48e	; 0x48e <SwitchHornGetStatus>
 258:	88 23       	and	r24, r24
 25a:	51 f0       	breq	.+20     	; 0x270 <LowVoltKill_update+0xda>
				{
					LowVoltkillTimer_mS = LOW_VOLT_TIME_MAX_HORN_ON_TIME;
 25c:	80 e1       	ldi	r24, 0x10	; 16
 25e:	97 e2       	ldi	r25, 0x27	; 39
 260:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <LowVoltkillTimer_mS>
 264:	90 93 05 38 	sts	0x3805, r25	; 0x803805 <LowVoltkillTimer_mS+0x1>
					LowVoltState = LOW_VOLT_STATE_CHECK_HORN1;
 268:	83 e0       	ldi	r24, 0x03	; 3
 26a:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <LowVoltState>
 26e:	08 95       	ret
				}
				
				else if(LowVoltkillTimer_mS == 0 && LowVoltDetected)
 270:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <LowVoltkillTimer_mS>
 274:	90 91 05 38 	lds	r25, 0x3805	; 0x803805 <LowVoltkillTimer_mS+0x1>
 278:	89 2b       	or	r24, r25
 27a:	09 f0       	breq	.+2      	; 0x27e <LowVoltKill_update+0xe8>
 27c:	66 c0       	rjmp	.+204    	; 0x34a <LowVoltKill_update+0x1b4>
 27e:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <LowVoltDetected>
 282:	88 23       	and	r24, r24
 284:	09 f4       	brne	.+2      	; 0x288 <LowVoltKill_update+0xf2>
 286:	61 c0       	rjmp	.+194    	; 0x34a <LowVoltKill_update+0x1b4>
				{
					Horn_Enable(1);
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 66 00 	call	0xcc	; 0xcc <Horn_Enable>
					LowVoltkillTimer_mS = LOW_VOLT_LOW_BATT_BEEP;
 28e:	84 e6       	ldi	r24, 0x64	; 100
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <LowVoltkillTimer_mS>
 296:	90 93 05 38 	sts	0x3805, r25	; 0x803805 <LowVoltkillTimer_mS+0x1>
					LowVoltState = LOW_VOLT_STATE_END_BEEP;
 29a:	84 e0       	ldi	r24, 0x04	; 4
 29c:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <LowVoltState>
 2a0:	08 95       	ret
			}

			//Horn Switch detected pressed.  Honk Horn and check battery level.  If detected low for period of time go to LOW_VOLT_STATE_BATT_LOW state
			case LOW_VOLT_STATE_CHECK_HORN1:
			{
				if(SwitchHornGetStatus())
 2a2:	0e 94 47 02 	call	0x48e	; 0x48e <SwitchHornGetStatus>
 2a6:	88 23       	and	r24, r24
 2a8:	69 f1       	breq	.+90     	; 0x304 <LowVoltKill_update+0x16e>
				{
					Horn_Enable(1);
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 66 00 	call	0xcc	; 0xcc <Horn_Enable>

					//stop honking horn if max on time expired
					if(LowVoltkillTimer_mS  == 0)
 2b0:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <LowVoltkillTimer_mS>
 2b4:	90 91 05 38 	lds	r25, 0x3805	; 0x803805 <LowVoltkillTimer_mS+0x1>
 2b8:	89 2b       	or	r24, r25
 2ba:	11 f4       	brne	.+4      	; 0x2c0 <LowVoltKill_update+0x12a>
					{
						SwitchClearHornStatus();
 2bc:	0e 94 4a 02 	call	0x494	; 0x494 <SwitchClearHornStatus>
					}

					//check Low battery condition over time
					if(!(AC0.STATUS & AC_STATE_bm))
 2c0:	80 91 87 06 	lds	r24, 0x0687	; 0x800687 <__RODATA_PM_OFFSET__+0x7f8687>
 2c4:	84 fd       	sbrc	r24, 4
 2c6:	12 c0       	rjmp	.+36     	; 0x2ec <LowVoltKill_update+0x156>
					{
						LowVoltDetectCount++;
 2c8:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <LowVoltDetectCount>
 2cc:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <LowVoltDetectCount+0x1>
 2d0:	01 96       	adiw	r24, 0x01	; 1
 2d2:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <LowVoltDetectCount>
 2d6:	90 93 08 38 	sts	0x3808, r25	; 0x803808 <LowVoltDetectCount+0x1>
						if(LowVoltDetectCount >= LOW_VOLT_LOW_BATT_DET_TIME)
 2da:	84 36       	cpi	r24, 0x64	; 100
 2dc:	91 05       	cpc	r25, r1
 2de:	a8 f1       	brcs	.+106    	; 0x34a <LowVoltKill_update+0x1b4>
						{
							LowVoltDetected = 1;
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <LowVoltDetected>
							LED_Red(1);
 2e6:	0e 94 9c 00 	call	0x138	; 0x138 <LED_Red>
 2ea:	08 95       	ret
						}
					}
					else
					{
						if(LowVoltDetectCount)
 2ec:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <LowVoltDetectCount>
 2f0:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <LowVoltDetectCount+0x1>
 2f4:	00 97       	sbiw	r24, 0x00	; 0
 2f6:	49 f1       	breq	.+82     	; 0x34a <LowVoltKill_update+0x1b4>
						{
							LowVoltDetectCount--;
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <LowVoltDetectCount>
 2fe:	90 93 08 38 	sts	0x3808, r25	; 0x803808 <LowVoltDetectCount+0x1>
 302:	08 95       	ret
						}
					}
				}
				else
				{
					LowVoltkillTimer_mS = LOW_VOLT_TIME_WAIT_LOW_BATT_BEEP;
 304:	84 e6       	ldi	r24, 0x64	; 100
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <LowVoltkillTimer_mS>
 30c:	90 93 05 38 	sts	0x3805, r25	; 0x803805 <LowVoltkillTimer_mS+0x1>
					LowVoltState = LOW_VOLT_STATE_CHECK_HORN0;
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <LowVoltState>
 316:	08 95       	ret
			}

			//Beep horn to indicate battery low.  Go back to LOW_VOLT_STATE_BATT_LOW state if horn switch pressed again
			case LOW_VOLT_STATE_END_BEEP:
			{
				if(SwitchHornGetStatus())
 318:	0e 94 47 02 	call	0x48e	; 0x48e <SwitchHornGetStatus>
 31c:	88 23       	and	r24, r24
 31e:	49 f0       	breq	.+18     	; 0x332 <LowVoltKill_update+0x19c>
				{
					LowVoltkillTimer_mS = LOW_VOLT_TIME_MAX_HORN_ON_TIME;
 320:	80 e1       	ldi	r24, 0x10	; 16
 322:	97 e2       	ldi	r25, 0x27	; 39
 324:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <LowVoltkillTimer_mS>
 328:	90 93 05 38 	sts	0x3805, r25	; 0x803805 <LowVoltkillTimer_mS+0x1>
					LowVoltState = LOW_VOLT_STATE_CHECK_HORN1;
 32c:	83 e0       	ldi	r24, 0x03	; 3
 32e:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <LowVoltState>
				}
			
				if(LowVoltkillTimer_mS == 0)
 332:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <LowVoltkillTimer_mS>
 336:	90 91 05 38 	lds	r25, 0x3805	; 0x803805 <LowVoltkillTimer_mS+0x1>
 33a:	89 2b       	or	r24, r25
 33c:	19 f4       	brne	.+6      	; 0x344 <LowVoltKill_update+0x1ae>
				{
					Horn_Enable(0);
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 66 00 	call	0xcc	; 0xcc <Horn_Enable>
			}

			//Just stay here with RED LED on.  Battery is dead
			case LOW_VOLT_STATE_DEAD:
			{
				LED_Red(1);
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	0e 94 9c 00 	call	0x138	; 0x138 <LED_Red>
 34a:	08 95       	ret

0000034c <main>:


int main(void)
{
	/* Fix the clock */
 	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLB, CLKCTRL_PEN_bm | (0 << CLKCTRL_PDIV0_bp));
 34c:	88 ed       	ldi	r24, 0xD8	; 216
 34e:	21 e0       	ldi	r18, 0x01	; 1
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	84 bf       	out	0x34, r24	; 52
 354:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>
 	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_OSC20M_gc);
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	84 bf       	out	0x34, r24	; 52
 35c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__RODATA_PM_OFFSET__+0x7f8060>
	
	RTC_init();
 360:	0e 94 4d 02 	call	0x49a	; 0x49a <RTC_init>
	LED_init();
 364:	0e 94 8d 00 	call	0x11a	; 0x11a <LED_init>
	SwitchInit();
 368:	0e 94 01 02 	call	0x402	; 0x402 <SwitchInit>
	Charger_init();
 36c:	0e 94 52 00 	call	0xa4	; 0xa4 <Charger_init>
	Horn_init();
 370:	0e 94 60 00 	call	0xc0	; 0xc0 <Horn_init>
	LowVoltKill_init();
 374:	0e 94 b0 00 	call	0x160	; 0x160 <LowVoltKill_init>
	
	LowSpeed = 0;
 378:	10 92 0c 38 	sts	0x380C, r1	; 0x80380c <LowSpeed>
	
	// Enable interrupts
	sei();
 37c:	78 94       	sei
	
	while (1)
	{
		wdt_reset();
 37e:	a8 95       	wdr
		SwitchUpdate();
 380:	0e 94 12 02 	call	0x424	; 0x424 <SwitchUpdate>
		

		//If Charging: LED's are controlled by Charger, and horn is forced off
		if(!(CHARGER_PWR_GOOD_PORT.IN & CHARGER_PWR_GOOD_BIT))
 384:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__RODATA_PM_OFFSET__+0x7f8408>
 388:	84 fd       	sbrc	r24, 4
 38a:	25 c0       	rjmp	.+74     	; 0x3d6 <main+0x8a>
		{
			if(LowSpeed == 0)
 38c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <LowSpeed>
 390:	81 11       	cpse	r24, r1
 392:	0c c0       	rjmp	.+24     	; 0x3ac <main+0x60>
			{
				_PROTECTED_WRITE(CLKCTRL.MCLKCTRLB, CLKCTRL_PEN_bm | (0 << CLKCTRL_PDIV0_bp));
 394:	98 ed       	ldi	r25, 0xD8	; 216
 396:	21 e0       	ldi	r18, 0x01	; 1
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	94 bf       	out	0x34, r25	; 52
 39c:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>
				_PROTECTED_WRITE(CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_OSCULP32K_gc);
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	94 bf       	out	0x34, r25	; 52
 3a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__RODATA_PM_OFFSET__+0x7f8060>
				LowSpeed = 1;
 3a8:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <LowSpeed>
			}

			Horn_Enable(0);
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	0e 94 66 00 	call	0xcc	; 0xcc <Horn_Enable>
			// LED_Green(0);

			//LED_update();//////////////
			if(CHARGER_STATUS_PORT.IN & CHARGER_STATUS_BIT) // battery is fully charged
 3b2:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__RODATA_PM_OFFSET__+0x7f8448>
 3b6:	81 ff       	sbrs	r24, 1
 3b8:	07 c0       	rjmp	.+14     	; 0x3c8 <main+0x7c>
			{
				LED_Red(0);
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	0e 94 9c 00 	call	0x138	; 0x138 <LED_Red>
			    LED_Green(1);
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	0e 94 a6 00 	call	0x14c	; 0x14c <LED_Green>
 3c6:	db cf       	rjmp	.-74     	; 0x37e <main+0x32>

			}
			else // battery is charging
			{
				LED_Red(1);
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	0e 94 9c 00 	call	0x138	; 0x138 <LED_Red>
				LED_Green(0);
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	0e 94 a6 00 	call	0x14c	; 0x14c <LED_Green>
 3d4:	d4 cf       	rjmp	.-88     	; 0x37e <main+0x32>
		}

		else
		//Not charging, honk horn unless fault found
		{
			if(LowSpeed == 1)
 3d6:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <LowSpeed>
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	61 f4       	brne	.+24     	; 0x3f6 <main+0xaa>
			{
 				_PROTECTED_WRITE(CLKCTRL.MCLKCTRLB, CLKCTRL_PEN_bm | (0 << CLKCTRL_PDIV0_bp));
 3de:	88 ed       	ldi	r24, 0xD8	; 216
 3e0:	21 e0       	ldi	r18, 0x01	; 1
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	84 bf       	out	0x34, r24	; 52
 3e6:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>
 				_PROTECTED_WRITE(CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_OSC20M_gc);
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	84 bf       	out	0x34, r24	; 52
 3ee:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__RODATA_PM_OFFSET__+0x7f8060>
				LowSpeed = 0;
 3f2:	10 92 0c 38 	sts	0x380C, r1	; 0x80380c <LowSpeed>
			}

			//LED_update();///////////////////
			LED_Green(0);
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	0e 94 a6 00 	call	0x14c	; 0x14c <LED_Green>
			LowVoltKill_update();
 3fc:	0e 94 cb 00 	call	0x196	; 0x196 <LowVoltKill_update>
 400:	be cf       	rjmp	.-132    	; 0x37e <main+0x32>

00000402 <SwitchInit>:
//*--------------------------------------------------------------------------------------

void SwitchInit(void)
{
	//Configure ID Pins
	SWITCH_HORN_PORT.DIRCLR = SWITCH_HORN_BIT;
 402:	e0 e2       	ldi	r30, 0x20	; 32
 404:	f4 e0       	ldi	r31, 0x04	; 4
 406:	82 e0       	ldi	r24, 0x02	; 2
 408:	82 83       	std	Z+2, r24	; 0x02
	SWITCH_HORN_PORT.OUTSET = SWITCH_HORN_BIT;
 40a:	85 83       	std	Z+5, r24	; 0x05
	SWITCH_HORN_CTRL = PORT_PULLUPEN_bm;
 40c:	88 e0       	ldi	r24, 0x08	; 8
 40e:	81 8b       	std	Z+17, r24	; 0x11

	//Initialize variables used for Horn Switch
	SwitchOldTick = 0;
 410:	10 92 0e 38 	sts	0x380E, r1	; 0x80380e <SwitchOldTick>
 414:	10 92 0f 38 	sts	0x380F, r1	; 0x80380f <SwitchOldTick+0x1>
	SwitchHornDebounce = SWITCH_HORN_DEBOUNCE_INITIAL; // 29
 418:	8e e0       	ldi	r24, 0x0E	; 14
 41a:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <SwitchHornDebounce>
	SwitchHornStatus = 0;
 41e:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <SwitchHornStatus>
 422:	08 95       	ret

00000424 <SwitchUpdate>:

void SwitchUpdate(void)
{

	//check if time to scan switches
	if(RTC_getTick() != SwitchOldTick)
 424:	0e 94 58 02 	call	0x4b0	; 0x4b0 <RTC_getTick>
 428:	20 91 0e 38 	lds	r18, 0x380E	; 0x80380e <SwitchOldTick>
 42c:	30 91 0f 38 	lds	r19, 0x380F	; 0x80380f <SwitchOldTick+0x1>
 430:	82 17       	cp	r24, r18
 432:	93 07       	cpc	r25, r19
 434:	59 f1       	breq	.+86     	; 0x48c <SwitchUpdate+0x68>
	{
		SwitchOldTick = RTC_getTick();
 436:	0e 94 58 02 	call	0x4b0	; 0x4b0 <RTC_getTick>
 43a:	80 93 0e 38 	sts	0x380E, r24	; 0x80380e <SwitchOldTick>
 43e:	90 93 0f 38 	sts	0x380F, r25	; 0x80380f <SwitchOldTick+0x1>

		//***********************************
		// Horn Switch
		//***********************************
		//is switch pressed?
		if(!(SWITCH_HORN_PORT.IN & SWITCH_HORN_BIT))
 442:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__RODATA_PM_OFFSET__+0x7f8428>
 446:	81 fd       	sbrc	r24, 1
 448:	12 c0       	rjmp	.+36     	; 0x46e <SwitchUpdate+0x4a>
		{
			if(SwitchHornDebounce < 255)
 44a:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <SwitchHornDebounce>
 44e:	8f 3f       	cpi	r24, 0xFF	; 255
 450:	19 f0       	breq	.+6      	; 0x458 <SwitchUpdate+0x34>
			{
				SwitchHornDebounce++;
 452:	8f 5f       	subi	r24, 0xFF	; 255
 454:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <SwitchHornDebounce>
			}
			if(SwitchHornDebounce == TIME_SWITCH_PRESS_DET)
 458:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <SwitchHornDebounce>
 45c:	8f 30       	cpi	r24, 0x0F	; 15
 45e:	b1 f4       	brne	.+44     	; 0x48c <SwitchUpdate+0x68>
			{
				SwitchHornDebounce = 255;				//indicate switch pressed
 460:	8f ef       	ldi	r24, 0xFF	; 255
 462:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <SwitchHornDebounce>
				SwitchHornStatus = 1;					//sets that a switch has been pressed
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	80 93 10 38 	sts	0x3810, r24	; 0x803810 <SwitchHornStatus>
 46c:	08 95       	ret
			}
		}
		else
		{
			//Switch not pressed
			if(SwitchHornDebounce > 0)
 46e:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <SwitchHornDebounce>
 472:	88 23       	and	r24, r24
 474:	19 f0       	breq	.+6      	; 0x47c <SwitchUpdate+0x58>
			{
				SwitchHornDebounce--;
 476:	81 50       	subi	r24, 0x01	; 1
 478:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <SwitchHornDebounce>
			}
			if(SwitchHornDebounce == (255 - TIME_SWITCH_RELEASE_DET))
 47c:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <SwitchHornDebounce>
 480:	80 3f       	cpi	r24, 0xF0	; 240
 482:	21 f4       	brne	.+8      	; 0x48c <SwitchUpdate+0x68>
			{
				SwitchHornDebounce = 0;
 484:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <SwitchHornDebounce>
				SwitchHornStatus = 0;					//clear bit indicating horn switch no longer pressed
 488:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <SwitchHornStatus>
 48c:	08 95       	ret

0000048e <SwitchHornGetStatus>:
//*--------------------------------------------------------------------------------------

uint8_t SwitchHornGetStatus(void)
{
	return SwitchHornStatus;
}
 48e:	80 91 10 38 	lds	r24, 0x3810	; 0x803810 <SwitchHornStatus>
 492:	08 95       	ret

00000494 <SwitchClearHornStatus>:
//* Output Parameters   : none
//*--------------------------------------------------------------------------------------

void SwitchClearHornStatus(void)
{
	SwitchHornStatus = 0;
 494:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <SwitchHornStatus>
 498:	08 95       	ret

0000049a <RTC_init>:
//* Output Parameters   : none
//*--------------------------------------------------------------------------------------

void RTC_init(void)
{
	while (RTC.STATUS > 0)
 49a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__RODATA_PM_OFFSET__+0x7f8141>
 49e:	81 11       	cpse	r24, r1
 4a0:	fc cf       	rjmp	.-8      	; 0x49a <RTC_init>
	{
		;										/* Wait for all register to be synchronized */
	}
	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc;
 4a2:	e0 e4       	ldi	r30, 0x40	; 64
 4a4:	f1 e0       	ldi	r31, 0x01	; 1
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	87 83       	std	Z+7, r24	; 0x07
	RTC.CTRLA = RTC_RTCEN_bm | RTC_RUNSTDBY_bm;	/* 1kHz Internal Crystal Oscillator (Internal 1kHz OSC) */
 4aa:	81 e8       	ldi	r24, 0x81	; 129
 4ac:	80 83       	st	Z, r24
 4ae:	08 95       	ret

000004b0 <RTC_getTick>:
//* Output Parameters   : Timer 0 Tick counter
//*--------------------------------------------------------------------------------------

inline uint16_t RTC_getTick(void)
{
	return RTC.CNT;
 4b0:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 4b4:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
}
 4b8:	08 95       	ret

000004ba <_exit>:
 4ba:	f8 94       	cli

000004bc <__stop_program>:
 4bc:	ff cf       	rjmp	.-2      	; 0x4bc <__stop_program>
